#! /usr/bin/env python3
from botocore.exceptions import ClientError
from copy import deepcopy
import argparse
import boto3
import botocore.session
import configparser
import os
import sys
import time


def main():
    parser = argparse.ArgumentParser(
        description='Deploy service with one or more tasks'
    )
    parser.add_argument('-r', '--region')
    parser.add_argument('-p', '--profile', default=None)
    parser.add_argument('-c', '--cluster', default='default')
    parser.add_argument('-s', '--service-name', dest='service')
    parser.add_argument('-d', '--task-definition', nargs=1, dest='taskName')
    parser.add_argument('-k', '--copy-images', dest='copy')
    parser.add_argument('-u', '--update', action='store_true')
    parser.add_argument('-i', '--image', nargs=2, action='append')
    parser.add_argument('-t', '--timeout', default=90, type=int)
    parser.add_argument('-b', '--backoff', default=5, type=int)
    parser.add_argument('-O', '--only-if-modified', action='store_true',
                        dest='onlyIfModified')

    args = parser.parse_args(sys.argv[1:])

    update = args.update

    # naive "rules" implementation
    if update and args.taskName:
        print("update and task-definition does not work together")
        sys.exit(1)
    elif args.copy and not update:
        print("Implicitly enabling update since you're using copy.")
        update = True
    elif not update and not args.taskName and not args.copy:
        print("You need to specify a task-definition "
              "or to copy using --copy-images")
        sys.exit(1)

    region = False
    if args.region:
        region = args.region
    elif 'AWS_DEFAULT_REGION' in os.environ:
        region = os.environ['AWS_DEFAULT_REGION']
    else:
        try:
            with open(os.path.expanduser('~/.aws/config'), 'r') as fp:
                config = configparser.RawConfigParser()
                config.read_file(fp)
                if args.profile:
                    region = config.get('profile ' + args.profile, 'region')
                else:
                    region = config.get('default', 'region')
        except FileNotFoundError:
            pass

    if not region:
        print("You need to specify a region to continue.")
        print("Either using -r (--region), by setting AWS_DEFAULT_REGION "
              "or specifying it in ~/.aws/config")
        sys.exit(1)

    session = boto3.Session(region_name=region, profile_name=args.profile)
    ecs = session.client('ecs')

    taskARN = False
    if update:
        result = ecs.describe_services(cluster=args.cluster,
                                       services=(args.service, ))
        taskARN = result['services'][0]['taskDefinition']

    if not taskARN:
        print("Unable to locate ARN for task")
        sys.exit(1)

    images = deepcopy(args.image)
    if args.copy:
        images = []
        result = ecs.describe_services(cluster=args.cluster,
                                       services=(args.copy, ))
        task = ecs.describe_task_definition(
            taskDefinition=result['services'][0]['taskDefinition'])
        for container in task['taskDefinition']['containerDefinitions']:
            images.append((container["name"], container["image"]))
        if len(images) > 0:
            print("Found and copied these container images:")
            print("\n".join(["{}: {}".format(*image) for image in images]))
        else:
            print("No container images found to copy, sorry.")
            sys.exit(1)

    task = ecs.describe_task_definition(taskDefinition=taskARN)

    newTaskdefinition = dict(
        family=task['taskDefinition']['family'],
        volumes=deepcopy(task['taskDefinition']['volumes']),
        containerDefinitions=deepcopy(
            task['taskDefinition']['containerDefinitions']),
    )

    has_update = False
    if images:
        for image in images:
            container = [x for x in newTaskdefinition["containerDefinitions"]
                         if x["name"] == image[0]]
            if container and container[0]["image"] != image[1]:
                has_update = True
                container[0]["image"] = image[1]

    if args.onlyIfModified and not has_update:
        print("No container images was updated, aborting")
        sys.exit(0)

    result = ecs.register_task_definition(**newTaskdefinition)
    newTaskdefinitionARN = result['taskDefinition']['taskDefinitionArn']
    print("New task definition: {}".format(newTaskdefinitionARN))

    if not args.service:
        print("Successfully updated task definition")
        sys.exit(0)

    ecs.update_service(
        cluster=args.cluster,
        service=args.service,
        taskDefinition=newTaskdefinitionARN
    )

    timeout = args.timeout
    t = time.time()
    while True:
        time.sleep(args.backoff)

        result = ecs.list_tasks(cluster=args.cluster,
                                serviceName=args.service,
                                desiredStatus='RUNNING')
        if result and 'taskArns' in result:
            try:
                tasks = ecs.describe_tasks(cluster=args.cluster,
                                           tasks=result['taskArns'])
                if tasks and 'tasks' in tasks:
                    has_updated = [x for x in tasks['tasks'] if x['taskDefinitionArn'] == newTaskdefinitionARN]
                    if len(has_updated) > 0:
                        print("Service updated successfully, "
                              "new task definition running.")
                        break
            except ClientError as e:
                if e.response['Error']['Message'] == 'Tasks cannot be empty.':
                    print("No tasks are currently running")
                else:
                    raise(e)

        if time.time() - t > timeout:
            print("ERROR: New task definition not running "
                  "within {} second(s)...".format(timeout))
            sys.exit(1)

        print("New task not running yet, "
              "backing off for {} seconds".format(args.backoff))

    # excplicitly end with exit code zero
    sys.exit(0)

if __name__ == "__main__":
    main()
